import com.novoda.gradle.command.Files

buildscript {
    repositories {
//        mavenLocal()
        google()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.2-SNAPSHOT'
        classpath 'com.novoda:gradle-android-command-plugin:2.0'
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.properties[property]
    }
    return defaultValue
}

android {
    compileSdkVersion project.compileSdkVersion
    useLibrary 'android.test.runner'
    useLibrary 'android.test.mock'
    useLibrary 'android.test.base'

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode project.versionCode
        versionName project.versionName
        multiDexEnabled true
        multiDexKeepProguard file('multidex-config.pro')

        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        buildConfigField "String[]", "CATEGORY_ICONS", "{" + categoryIcons() + "}"
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"

        vectorDrawables.useSupportLibrary = true
        resConfigs "en", "ar", "bg", "ca", "cs", "da", "de", "el", "es", "eu", "fr", "hr", "hu", "it", "iw", "ja", "km", "kn", "ko", "ms", "pl", "pt_BR", "pt_PT", "ro", "ru", "si", "ta", "te", "tr", "uk", "vi", "zh_CN", "zh_HK", "zh_TW"
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "unknown"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD", "unknown")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS", "unknown")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD", "unknown")

        }
    }*/
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
            //signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            applicationIdSuffix ""
            //ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "My Expenses Debug", debug: "true"]
            buildConfigField "int", "TEST_SCENARIO", getPropertyIfDefined('testScenario', "1")
            buildConfigField "String", "BUILD_DATE", "\"now\""
            buildConfigField "String", "OPEN_EXCHANGE_RATES_API_KEY", "\"" + getPropertyIfDefined('OPEN_EXCHANGE_RATES_API_KEY', "") + "\""
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions "security", "textRecognition"

    productFlavors {
        conscript {
            dimension "security"
        }
        intern {
            dimension "textRecognition"
        }
        extern {
            dimension "textRecognition"
        }
    }

    sourceSets {
        main.res.srcDirs += 'src/main/categoryIcons'
        conscript {
            release {
                java.srcDirs += 'src/conscriptRelease/java'
            }
            debug {
                java.srcDirs += 'src/conscriptDebug/java'
            }
        }
        test {
            java.srcDirs += "src/testShared/java"
        }

        androidTest {
            java.srcDirs += "src/testShared/java"
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
        abortOnError true
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        jumboMode = true
    }
    packagingOptions {
        exclude 'META-INF/*'
    }

    variantFilter { variant ->
        if (project.hasProperty("buildType") && variant.buildType.name != project.ext.buildType) {
            setIgnore(true)
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
    //It does not seem possible to define dynamicFeatures dependent on variant
    //If you want to build intern variant, you need to include mlkit and/or tesseract module
    //dynamicFeatures = [':ocr', ':mlkit', ':tesseract']
    dynamicFeatures = [':ocr', ':webui']
}

configurations {
    conscriptExternReleaseImplementation
    conscriptInternReleaseImplementation
}

dependencies {
    implementation project(':transactionscontract')
    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    implementation 'com.squareup.phrase:phrase:1.1.0'
    kapt "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'frankiesardo:icepick:3.2.0'
    kapt 'frankiesardo:icepick-processor:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    api 'com.google.auto.value:auto-value-annotations:1.7.4'
    kapt 'com.google.auto.value:auto-value:1.7'

    kapt 'com.ryanharter.auto.value:auto-value-gson:1.3.0'
    api 'com.ryanharter.auto.value:auto-value-gson-runtime:1.3.0'

    kapt 'com.gabrielittner.auto.value:auto-value-cursor:1.1.0'
    implementation 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.1.0'

    kapt 'com.ryanharter.auto.value:auto-value-parcel:0.2.8'

    implementation 'com.github.mtotschnig:StickyListHeaders:2.8.0'
    implementation 'com.github.mtotschnig:MaterialSeekBarPreference:bc211774e5'
    implementation project(':PlayLicensingOrig')
    implementation('com.gitlab.mtotschn:dav4android:fbaa5b51') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    implementation 'com.itextpdf:itextpdf:5.5.13.1'
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang"
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation "org.apache.commons:commons-text:$commonsText"
    implementation "com.squareup.picasso:picasso:$picassoVersion"
    implementation 'com.github.mtotschnig:MPAndroidChart:6fcf34d9d4'
    implementation 'com.github.mtotschnig:Caldroid:2fcb748f0e'
    implementation 'com.github.eltos:simpledialogfragments:v3.3.2'
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.2'

    // WebDAV2
    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:4.0.0'

    //noinspection GradleCompatible
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'org.apache.commons:commons-collections4:4.1'

    implementation "com.jakewharton.timber:timber:$timberVersion"

    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.recyclerview:recyclerview:$recyclerview"
    implementation 'androidx.cardview:cardview:1.0.0'
    api "com.google.android.material:material:$materialComponents"
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    api 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Revert to com.google.android:flexbox:2.0.1 when https://github.com/google/flexbox-layout/issues/566 is resolved
    implementation("com.github.google:flexbox-layout:2.0.1")

    implementation project(path: ':setupwizard')

    //licence validation
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp"
    testImplementation('org.threeten:threetenbp:1.5.1') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }

    implementation 'com.github.lzyzsd:circleprogress:1.2.1'

    conscriptExternReleaseImplementation 'org.conscrypt:conscrypt-android:2.5.1'
    conscriptInternReleaseImplementation 'org.conscrypt:conscrypt-android:2.5.1'

    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //https://github.com/romandanylyk/PageIndicatorView/issues/141
    implementation 'com.github.romandanylyk:PageIndicatorView:b1bad589b5'

    implementation 'com.afollestad.material-dialogs:core:3.3.0'

    androidTestImplementation 'tools.fastlane:screengrab:2.0.0'
    //Screengrab still references falcon 2.2.1 which is not on Jcenter
    androidTestImplementation 'com.jraska:falcon:2.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTextExtJunit"
    androidTestImplementation "androidx.test:runner:$androidSupportTestVersion"
    androidTestUtil "androidx.test:orchestrator:$androidSupportTestVersion"
    androidTestImplementation "androidx.test:rules:$androidSupportTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'accessibility-test-framework'
    }
    //androidTestImplementation  "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"
    testImplementation "androidx.test:core:$androidSupportTestVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    //noinspection GradleDependency
    androidTestImplementation "org.assertj:assertj-core:$assertjVersionAndroid"
    androidTestImplementation "com.google.truth:truth:1.1.2"
    testImplementation "com.google.truth:truth:1.1.2"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test:rules:$androidSupportTestVersion"
    testImplementation "androidx.test.ext:junit:$androidxTextExtJunit"

    // Room components
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$androidxArchVersion"

    // ViewModel Kotlin support
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    //implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    internImplementation "com.google.android.gms:play-services-base:17.6.0"

    //noinspection GradleDependency
    implementation 'com.github.mtotschnig:Android-Image-Cropper:cbea979d2a'
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

//apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.novoda.android-command'

task copyFileForFixture(type: Files) {
    script {
        push "tests/script/screenshot.jpg", "/sdcard/Android/data/org.totschnig.myexpenses.fortest/files/screenshot.jpg"
    }
}

task echoPublishTag() {
    doLast {
        println "ChangeLog.install/bin/ChangeLog fdroid ${versionName} ${versionCode}"
        println "git add metadata/*/changelogs/${versionCode}.txt"
        println "echo -e \"versionName=${versionName}\\nversionCode=${versionCode}\">docs/.well-known/fdroid-latest.txt"
        println "git add docs/.well-known/fdroid-latest.txt"
        println "git commit -m \"Release ${versionName}\""
        println "git push"
        println "git tag r${versionCode}; git push origin r${versionCode}"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {
    kotlinOptions.useOldBackend = true
}

def categoryIcons() {
    return new File("${projectDir}/src/main/categoryIcons/drawable")
            .listFiles()
            .collect { it.name }
            .collect { it.take(it.lastIndexOf('.')) }
            .collect { "\"" + it + "\"" }
            .join(", ")
}